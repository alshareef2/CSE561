package project;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.Point;
import java.util.ArrayList;
import java.util.List;

import GenCol.entity;
import project.entities.*;
import twitter.types.User;
import view.modeling.ViewableAtomic;
import view.modeling.ViewableComponent;
import view.modeling.ViewableDigraph;

// test commit..
public class DTM extends ViewableDigraph {
	public static int PROCS = 3;
	double processing_time = 10;
	ArrayList <Processor> procList;
	ArrayList <UserAM> userList;
	
	ViewableAtomic g, tm, tr;
	
	public DTM(){
		this("Twitter Model");
	}

	public DTM(String name) {
		super(name);
		procList = new ArrayList <Processor> ();
		addOutport("Statistics");

		g = new RealisticTweetG();
		tm = new TweetCreator();
		tr = new DTransd("Transducer",10);
		
		g.setBackgroundColor(Color.cyan);
		tm.setBackgroundColor(Color.pink);
		tr.setBackgroundColor(Color.orange);

		add(g);
		add(tm);
		add(tr);

		//code to allow the user to FORCE returning the stats.
		addInport("putStatsNow");
		addTestInput("putStatsNow", new entity("Getstats"));
		addCoupling(this, "putStatsNow", tm, TweetCreator.IN_RETURNSTATSNOW);

		//code to start the experiment.
		addInport("startExp");
		addTestInput("startExp", new StartExperiment("Small Experiment", 500, 150, 2.0, 1.5, "#a", 1000, false));
		// addTestInput("startExp", new StartExperiment("Large Experiment", 10000, 130, 2.0, 1.5, "#a", 1000));
		addTestInput("startExp", new StartExperiment("Large Experiment", 10000, 150, 2.0, 1.5, "#a", 10080, false));
		// addTestInput("startExp", new StartExperiment("Large Experiment", 10000, 130, 120.0, 15.5, "#a", 1000));
		addTestInput("startExp", new StartExperiment("Large, Many Tweets Experiment", 10000, 150, 20.0, 15.0, "#a", 1000, false));
		addCoupling(this, "startExp", g, RealisticTweetG.IN_START);

		// test Input for small number of users
		addTestInput("startExp", new StartExperiment("users Experiment", 5, 2, 2.0, 1.5, "#a", 1000, true));
		
		
		//add some test extreme topics
		addInport("extremeTopic");
		addCoupling(this, "extremeTopic", tm, TweetCreator.IN_EXTREMETOPIC);
		addTestInput("extremeTopic", new ExtremeTopicCommand("1", 1440.0));
		addTestInput("extremeTopic", new ExtremeTopicCommand("1", 100.0));

		addCoupling(g, TweetG.OUT_SETTINGS, tm, TweetCreator.IN_CONFIG);
		addCoupling(g, TweetG.OUT_TWTCMD, tm, TweetCreator.IN_TWEETCOMMAND);

		addCoupling(tm, TweetCreator.OUT_TWEET, tr, "lists");
		addCoupling(tr, "stat", this, "Statistics");

		addCoupling(this, "startExp", tr, "getExperiment");

	}
	
	/**
	 * @return the procList
	 */
	public ArrayList<Processor> getProcList() {
		return procList;
	}

	/**
	 * @param procList the procList to set
	 */
	public void setProcList(ArrayList<Processor> procList) {
		this.procList = procList;
	}

	public Processor addProcessor(int proc_counter, double duration){
		
		//Processor proc = new Processor("P"+proc_counter, this.processing_time);
		Processor proc = new Processor("P"+proc_counter, this.processing_time);
		//Add the processor into the list
		procList.add(proc);
			
		return proc;
	}
	
	/**
	 * @param userList the procList to set
	 */
	public void setUserList(ArrayList<UserAM> userList) {
		this.userList = userList;
	}

	public List<UserAM> addUsers(List<User> users){

		List<UserAM> userAMs = new ArrayList<UserAM>();
		
		for(User user: users){
			UserAM userAM = new UserAM("U"+user.getUserID(), user.getUserID(), null);
			userList.add(userAM);
			add(userAM);
			System.out.println(user.getUserID()+" USERS GENERATED!!");
			userAMs.add(userAM);
		}


		return userAMs;
	}

    /**
     * Automatically generated by the SimView program.
     * Do not edit this manually, as such changes will get overwritten.
     */
    public void layoutForSimView()
    {
        preferredSize = new Dimension(1039, 570);
        ((ViewableComponent)withName("Transducer")).setPreferredLocation(new Point(50, 50));
        ((ViewableComponent)withName("TweetCreator")).setPreferredLocation(new Point(250, 55));
        ((ViewableComponent)withName("P17")).setPreferredLocation(new Point(50, 50));
        ((ViewableComponent)withName("User_3")).setPreferredLocation(new Point(50, 50));
        ((ViewableComponent)withName("User_2")).setPreferredLocation(new Point(50, 50));
        ((ViewableComponent)withName("User_1")).setPreferredLocation(new Point(50, 50));
        ((ViewableComponent)withName("Real Tweet Gen")).setPreferredLocation(new Point(50, 50));
        ((ViewableComponent)withName("User_4")).setPreferredLocation(new Point(50, 50));
        ((ViewableComponent)withName("User_0")).setPreferredLocation(new Point(50, 50));
    }
}
