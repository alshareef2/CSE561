package project;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.Point;
import java.util.ArrayList;

import GenCol.entity;
import project.entities.*;
import view.modeling.ViewableAtomic;
import view.modeling.ViewableComponent;
import view.modeling.ViewableDigraph;

public class DTM_expanded extends ViewableDigraph {
	public static int PROCS = 3;
	double processing_time = 10;
	ArrayList <Processor> procList;
	
	ViewableAtomic g, tr;
	ViewableDigraph tm;
	
	public DTM_expanded(){
		this("Twitter Model");
	}

	public DTM_expanded(String name) {
		super(name);
		procList = new ArrayList <Processor> ();
		addOutport("Statistics");

		g = new RealisticTweetG();
		tm = new TweetCreatorC();
		tr = new DTransd();
		
		g.setBackgroundColor(Color.cyan);
		//tm.setBackgroundColor(Color.pink);
		tr.setBackgroundColor(Color.orange);

		add(g);
		add(tm);
		add(tr);

		//code to allow the user to FORCE returning the stats.
		addInport("putStatsNow");
		addTestInput("putStatsNow", new entity("Getstats"));
		addCoupling(this, "putStatsNow", tm, TweetCreator.IN_RETURNSTATSNOW);

		//code to start the experiment.
		addInport("startExp");
		addTestInput("startExp", new StartExperiment("users Experiment", 5, 2, 2.0, 1.5, "#a", 1000));
		addTestInput("startExp", new StartExperiment("Small Experiment", 500, 150, 2.0, 1.5, "#a", 1000));
		// addTestInput("startExp", new StartExperiment("Large Experiment", 10000, 130, 2.0, 1.5, "#a", 1000));
		addTestInput("startExp", new StartExperiment("Large Experiment", 10000, 150, 2.0, 1.5, "#a", 10080));
		// addTestInput("startExp", new StartExperiment("Large Experiment", 10000, 130, 120.0, 15.5, "#a", 1000));
		addTestInput("startExp", new StartExperiment("Large, Many Tweets Experiment", 10000, 150, 20.0, 15.0, "#a", 1000));
		addCoupling(this, "startExp", g, RealisticTweetG.IN_START);

		//add some test extreme topics
		addInport("extremeTopic");
		addCoupling(this, "extremeTopic", tm, TweetCreator.IN_EXTREMETOPIC);
		addTestInput("extremeTopic", new ExtremeTopicCommand("1", 1440.0));
		addTestInput("extremeTopic", new ExtremeTopicCommand("1", 100.0));

		addCoupling(g, TweetG.OUT_SETTINGS, tm, TweetCreator.IN_CONFIG);
		addCoupling(g, TweetG.OUT_TWTCMD, tm, TweetCreator.IN_TWEETCOMMAND);

		addCoupling(tm, TweetCreator.OUT_TWEET, tr, "lists");
		addCoupling(tr, "stat", this, "Statistics");

		addCoupling(this, "startExp", tr, "getExperiment");

	}
	
	/**
	 * @return the procList
	 */
	public ArrayList<Processor> getProcList() {
		return procList;
	}

	/**
	 * @param procList the procList to set
	 */
	public void setProcList(ArrayList<Processor> procList) {
		this.procList = procList;
	}

	public Processor addProcessor(int proc_counter, double duration){
		
		//Processor proc = new Processor("P"+proc_counter, this.processing_time);
		Processor proc = new Processor("P"+proc_counter, this.processing_time);
		//Add the processor into the list
		procList.add(proc);
			
		return proc;
	}

    /**
     * Automatically generated by the SimView program.
     * Do not edit this manually, as such changes will get overwritten.
     */
    public void layoutForSimView()
    {
        preferredSize = new Dimension(1069, 545);
        ((ViewableComponent)withName("DTransd")).setPreferredLocation(new Point(159, 424));
        ((ViewableComponent)withName("Twitter CM")).setPreferredLocation(new Point(452, 92));
        ((ViewableComponent)withName("Real Tweet Gen")).setPreferredLocation(new Point(0, 105));
    }
}
