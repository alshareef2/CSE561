package project;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.Point;
import java.util.ArrayList;

import GenCol.entity;
import project.entities.ExtremeTopicCommand;
import view.modeling.ViewableAtomic;
import view.modeling.ViewableComponent;
import view.modeling.ViewableDigraph;

public class TwitterModel extends ViewableDigraph {

	double processing_time = 10;
	int procCount = 1;
	ArrayList <Processor> procList;
	
	ViewableAtomic g, tm, tr;
	ViewableAtomic p1, p2, p3;
	
	public TwitterModel(){
		this("Twitter Model");
	}

	public TwitterModel(String name) {
		super(name);
		procList = new ArrayList <Processor> ();
		addOutport("OUT");

		g = new RealisticTweetG();
		tm = new TweetCreator();
		tr = new Transducer();

		p1 = new Processor("P1",10);
		p2 = new Processor("P2",10);
		p3 = new Processor("P3",10);
		
		g.setBackgroundColor(Color.cyan);
		tm.setBackgroundColor(Color.pink);
		tr.setBackgroundColor(Color.orange);

		add(g);
		add(tm);
		add(tr);

		add(p1);
		add(p2);
		add(p3);

		//processor coupling 
		addCoupling(tr, "send_lists_P1", p1, "lists");
		addCoupling(p1, "stat", tr, "solved");
		addCoupling(tr, "send_lists_P2", p2, "lists");
		addCoupling(p2, "stat", tr, "solved");
		addCoupling(tr, "send_lists_P3", p3, "lists");
		addCoupling(p3, "stat", tr, "solved");

		//code to allow the user to FORCE returning the stats.
		addInport("putStatsNow");
		addTestInput("putStatsNow", new entity("Getstats"));
		addCoupling(this, "putStatsNow", tm, TweetCreator.IN_RETURNSTATSNOW);

		//code to start the experiment.
		addInport("startExp");
		addTestInput("startExp", new entity("Start"));
		addCoupling(this, "startExp", g, RealisticTweetG.IN_START);

		//add some test extreme topics
		addInport("extremeTopic");
		addCoupling(this, "extremeTopic", tm, TweetCreator.IN_EXTREMETOPIC);
		addTestInput("extremeTopic", new ExtremeTopicCommand("1", 30.0));

		addCoupling(g, TweetG.OUT_SETTINGS, tm, TweetCreator.IN_CONFIG);
		addCoupling(g, TweetG.OUT_TWTCMD, tm, TweetCreator.IN_TWEETCOMMAND);

		addCoupling(tm, TweetCreator.OUT_TWEET, tr, "lists");
		addCoupling(tr, "stat", this, "OUT");

	}
	
	public Processor addProcessor(double processing_time){
		
		Processor proc = new Processor("P"+procCount, this.processing_time);			
		//Add the processor into the list
		procList.add(proc);
		procCount++;
		
		return proc;
	}

	/**
	 * Automatically generated by the SimView program.
	 * Do not edit this manually, as such changes will get overwritten.
	 */
	public void layoutForSimView()
	{
		preferredSize = new Dimension(696, 391);
		((ViewableComponent)withName("P3")).setPreferredLocation(new Point(357, 255));
		((ViewableComponent)withName("Real Tweet Gen")).setPreferredLocation(new Point(10, 27));
		((ViewableComponent)withName("P1")).setPreferredLocation(new Point(70, 294));
		((ViewableComponent)withName("Transducer")).setPreferredLocation(new Point(211, 174));
		((ViewableComponent)withName("TweetCreator")).setPreferredLocation(new Point(63, 101));
		((ViewableComponent)withName("P2")).setPreferredLocation(new Point(214, 272));
	}
}
